 generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// Enumeración de roles de usuario
enum Rol {
  apoderado
  docente
  director
  administrador
}

/// Enumeración de estado de encuesta
enum EstadoEncuesta {
  borrador
  activa
  cerrada
  vencida
}

/// Enumeración de tipo de pregunta
enum TipoPregunta {
  texto_corto
  texto_largo
  opcion_unica
  opcion_multiple
  escala_1_5
}

/// Enumeración de tipo de permiso para docentes
enum PermisoTipo {
  comunicados
  encuestas
}

/// Enumeración de tipo de evaluación
enum EvalTipo {
  unica
  recurrente
}

/// Enumeración de estado de matrícula
enum MatriculaEstado {
  activo
  retirado
  trasladado
}

/// Enumeración de tipo de relación familiar
enum RelacionTipo {
  padre
  madre
  apoderado
  tutor
}

/// Tabla: usuarios
model Usuario {
  id                    String    @id @default(uuid()) @db.Uuid
  tipo_documento        String
  nro_documento         String    @db.VarChar(20)
  password_hash         String
  rol                   Rol
  nombre                String
  apellido              String
  telefono              String    @db.VarChar(20)
  fecha_creacion        DateTime  @default(now())
  fecha_ultimo_login    DateTime?
  estado_activo         Boolean   @default(true)
  debe_cambiar_password Boolean   @default(false)

  // Relaciones existentes
  resetTokens             PasswordResetToken[]
  blacklistedTokens       TokenBlacklist[]
  permisosDocentes        PermisoDocente[]
  permisosOtorgados       PermisoDocente[]    @relation("PermisoOtorgadoPor")
  permisosDocentesLogs    PermisoDocenteLog[]
  permisosLogsOtorgados   PermisoDocenteLog[] @relation("PermisoLogOtorgadoPor")
  asignacionesDocente     AsignacionDocenteCurso[]
  relacionesApoderado     RelacionesFamiliares[]
  
  // Nuevas relaciones para encuestas
  encuestasCreadas         Encuesta[]
  respuestasEncuestas       RespuestaEncuesta[]
  notificacionesUsuario     Notificacion[]

  @@unique([tipo_documento, nro_documento], name: "usuarios_documento_unique")
  @@map("usuarios")
}

/// Tabla: password_reset_tokens
model PasswordResetToken {
  id               String    @id @default(uuid()) @db.Uuid
  token            String    @unique
  id_usuario       String    @db.Uuid
  usuario          Usuario   @relation(fields: [id_usuario], references: [id])
  fecha_creacion   DateTime  @default(now())
  fecha_expiracion DateTime
  usado            Boolean   @default(false)

  @@index([id_usuario, fecha_creacion], name: "idx_reset_tokens_usuario_fecha")
  @@map("password_reset_tokens")
}

/// Tabla: tokens_blacklist
model TokenBlacklist {
  id             String   @id @default(uuid()) @db.Uuid
  token          String   @unique
  usuario_id     String?  @db.Uuid
  usuario        Usuario? @relation(fields: [usuario_id], references: [id])
  fecha_creacion DateTime @default(now())

  @@map("tokens_blacklist")
}

/// Tabla: permisos_docentes
model PermisoDocente {
  id               String      @id @default(uuid()) @db.Uuid
  docente_id       String      @db.Uuid
  docente          Usuario     @relation(fields: [docente_id], references: [id])
  tipo_permiso     PermisoTipo
  estado_activo    Boolean     @default(true)
  fecha_otorgamiento DateTime  @default(now())
  otorgado_por     String?     @db.Uuid
  otorgante        Usuario?    @relation("PermisoOtorgadoPor", fields: [otorgado_por], references: [id])
  año_academico    Int

  @@unique([docente_id, tipo_permiso, año_academico])
  @@map("permisos_docentes")
}

/// Tabla: historial de cambios de permisos
model PermisoDocenteLog {
  id             String      @id @default(uuid()) @db.Uuid
  docente_id     String      @db.Uuid
  docente        Usuario     @relation(fields: [docente_id], references: [id])
  tipo_permiso   PermisoTipo
  accion         String
  fecha          DateTime    @default(now())
  otorgado_por   String?     @db.Uuid
  otorgante      Usuario?    @relation("PermisoLogOtorgadoPor", fields: [otorgado_por], references: [id])
  año_academico  Int

  @@index([docente_id, año_academico])
  @@map("permisos_docentes_log")
}

/// Tabla: nivel_grado
model NivelGrado {
  id            String   @id @default(uuid()) @db.Uuid
  nivel         String
  grado         String
  descripcion   String?
  estado_activo Boolean  @default(true)

  cursos        Curso[]
  asignaciones  AsignacionDocenteCurso[]
  estudiantes   Estudiante[]

  @@unique([nivel, grado])
  @@map("nivel_grado")
}

/// Tabla: cursos
model Curso {
  id              String     @id @default(uuid()) @db.Uuid
  nombre          String
  codigo_curso    String     @unique
  nivel_grado_id  String     @db.Uuid
  nivel_grado     NivelGrado @relation(fields: [nivel_grado_id], references: [id])
  año_academico   Int
  estado_activo   Boolean    @default(true)

  asignaciones    AsignacionDocenteCurso[]

  @@map("cursos")
}

/// Tabla: asignaciones_docente_curso
model AsignacionDocenteCurso {
  id              String     @id @default(uuid()) @db.Uuid
  docente_id      String     @db.Uuid
  docente         Usuario    @relation(fields: [docente_id], references: [id])
  curso_id        String     @db.Uuid
  curso           Curso      @relation(fields: [curso_id], references: [id])
  nivel_grado_id  String     @db.Uuid
  nivel_grado     NivelGrado @relation(fields: [nivel_grado_id], references: [id])
  año_academico   Int
  fecha_asignacion DateTime
  estado_activo   Boolean    @default(true)

  @@index([docente_id, año_academico, estado_activo])
  @@map("asignaciones_docente_curso")
}

/// Tabla: estructura_evaluacion
model EstructuraEvaluacion {
  id                  String    @id @default(uuid()) @db.Uuid
  año_academico       Int
  nombre_item         String
  peso_porcentual     Decimal   @db.Decimal(5, 2)
  tipo_evaluacion     EvalTipo
  orden_visualizacion Int
  estado_activo       Boolean   @default(true)
  fecha_configuracion DateTime  @default(now())
  bloqueada           Boolean   @default(true)

  @@index([año_academico, estado_activo])
  @@map("estructura_evaluacion")
}

/// Tabla: estudiantes
model Estudiante {
  id               String         @id @default(uuid()) @db.Uuid
  codigo_estudiante String        @unique
  nombre           String
  apellido         String
  nivel_grado_id   String         @db.Uuid
  nivel_grado      NivelGrado     @relation(fields: [nivel_grado_id], references: [id])
  año_academico    Int
  estado_matricula MatriculaEstado @default(activo)

  relacionesFamiliares RelacionesFamiliares[]
  respuestasEncuestas       RespuestaEncuesta[]
  notificacionesEstudiante  Notificacion[]

  @@index([nivel_grado_id, año_academico])
  @@map("estudiantes")
}

/// Tabla: relaciones_familiares
model RelacionesFamiliares {
  id              String        @id @default(uuid()) @db.Uuid
  apoderado_id    String        @db.Uuid
  apoderado       Usuario       @relation(fields: [apoderado_id], references: [id])
  estudiante_id   String        @db.Uuid
  estudiante      Estudiante    @relation(fields: [estudiante_id], references: [id])
  tipo_relacion   RelacionTipo
  fecha_asignacion DateTime     @default(now())
  estado_activo   Boolean       @default(true)
  año_academico   Int

  @@index([apoderado_id, estado_activo], name: "idx_relaciones_apoderado")
  @@index([estudiante_id], name: "idx_relaciones_estudiante")
  @@map("relaciones_familiares")
}

/// Tabla: encuestas
model Encuesta {
  id                        String         @id @default(uuid()) @db.Uuid
  titulo                    String         @db.VarChar(200)
  descripcion               String
  fecha_creacion            DateTime       @default(now())
  fecha_inicio              DateTime?      // Fecha de publicación
  fecha_vencimiento         DateTime?      // Fecha límite para responder
  fecha_cierre              DateTime?      // Fecha de cierre anticipado
  estado                    EstadoEncuesta @default(borrador)
  permite_respuesta_multiple Boolean        @default(false)
  es_anonima                Boolean        @default(false)
  mostrar_resultados        Boolean        @default(true)
  autor_id                  String         @db.Uuid
  autor                     Usuario        @relation(fields: [autor_id], references: [id])
  año_academico             Int
  
  // Relaciones
  preguntas                 PreguntaEncuesta[]
  respuestas                RespuestaEncuesta[]
  notificacionesEncuesta    Notificacion[]

  @@map("encuestas")
}

/// Tabla: preguntas de encuesta
model PreguntaEncuesta {
  id            String       @id @default(uuid()) @db.Uuid
  encuesta_id   String       @db.Uuid
  encuesta      Encuesta     @relation(fields: [encuesta_id], references: [id], onDelete: Cascade)
  texto         String
  tipo          TipoPregunta
  obligatoria   Boolean      @default(false)
  orden         Int
  opciones      OpcionPregunta[]
  respuestas    RespuestaPregunta[]
  votos         VotoEncuesta[]

  @@map("preguntas_encuesta")
}

/// Tabla: opciones de pregunta (para opción única y múltiple)
model OpcionPregunta {
  id           String           @id @default(uuid()) @db.Uuid
  pregunta_id  String           @db.Uuid
  pregunta     PreguntaEncuesta @relation(fields: [pregunta_id], references: [id], onDelete: Cascade)
  texto        String
  orden        Int
  votos        VotoEncuesta[]

  @@map("opciones_pregunta")
}

/// Tabla: respuestas de encuesta
model RespuestaEncuesta {
  id                       String    @id @default(uuid()) @db.Uuid
  encuesta_id              String    @db.Uuid
  encuesta                 Encuesta  @relation(fields: [encuesta_id], references: [id])
  usuario_id               String    @db.Uuid
  usuario                  Usuario   @relation(fields: [usuario_id], references: [id])
  estudiante_id            String?   @db.Uuid // Para padres, referencia al hijo
  estudiante               Estudiante? @relation(fields: [estudiante_id], references: [id])
  fecha_respuesta          DateTime  @default(now())
  tiempo_respuesta_minutos Int?
  ip_respuesta             String?
  
  // Relaciones
  respuestasPregunta       RespuestaPregunta[]
  votos                    VotoEncuesta[]

  @@unique([encuesta_id, usuario_id])
  @@map("respuestas_encuestas")
}

/// Tabla: respuestas a preguntas específicas
model RespuestaPregunta {
  id               String            @id @default(uuid()) @db.Uuid
  respuesta_id     String            @db.Uuid
  respuesta        RespuestaEncuesta @relation(fields: [respuesta_id], references: [id], onDelete: Cascade)
  pregunta_id      String            @db.Uuid
  pregunta         PreguntaEncuesta  @relation(fields: [pregunta_id], references: [id])
  valor_texto     String?           // Para respuestas de texto
  valor_opcion_id String?           // Para respuestas de opción única
  valor_opciones  String[]          // Para respuestas de opción múltiple (array de IDs)
  valor_escala    Int?              // Para respuestas de escala 1-5
  votos           VotoEncuesta[]

  @@map("respuestas_pregunta")
}

/// Tabla: votos (para opción múltiple)
model VotoEncuesta {
  id               String            @id @default(uuid()) @db.Uuid
  respuesta_id     String            @db.Uuid
  respuesta        RespuestaEncuesta @relation(fields: [respuesta_id], references: [id], onDelete: Cascade)
  pregunta_id      String            @db.Uuid
  pregunta         PreguntaEncuesta  @relation(fields: [pregunta_id], references: [id])
  opcion_id        String            @db.Uuid
  opcion           OpcionPregunta   @relation(fields: [opcion_id], references: [id])
  respuesta_pregunta_id String?      @db.Uuid
  respuesta_pregunta RespuestaPregunta? @relation(fields: [respuesta_pregunta_id], references: [id])

  @@map("votos_encuesta")
}

/// Tabla: notificaciones
model Notificacion {
  id                       String    @id @default(uuid()) @db.Uuid
  usuario_id                String    @db.Uuid
  usuario                   Usuario   @relation(fields: [usuario_id], references: [id])
  tipo                     String    // "asistencia", "calificacion", "mensaje", "comunicado", "encuesta", "sistema"
  titulo                   String    @db.VarChar(200)
  contenido                String
  datos_adicionales        Json?     // Información extra en JSON
  canal                    String    // "plataforma", "whatsapp", "ambos"
  estado_plataforma        String    @default("pendiente") // "pendiente", "entregada", "leida"
  estado_whatsapp          String?   // "pendiente", "enviado", "entregado", "error"
  fecha_creacion           DateTime  @default(now())
  fecha_entrega_plataforma DateTime?
  fecha_envio_whatsapp     DateTime?
  fecha_lectura            DateTime?
  url_destino              String?
  estudiante_id            String?   @db.Uuid
  estudiante               Estudiante? @relation(fields: [estudiante_id], references: [id])
  referencia_id            String?   // ID del elemento que generó la notificación
  tipo_referencia           String?   // "encuesta" para identificar tipo
  año_academico            Int
  encuesta_id              String?   @db.Uuid
  encuesta                 Encuesta?  @relation(fields: [encuesta_id], references: [id])

  @@map("notificaciones")
}
