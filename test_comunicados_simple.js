'use strict';

const { PrismaClient } = require('@prisma/client');
const comunicadosService = require('./services/comunicadosService');

const prisma = new PrismaClient();

async function testComunicadosBasico() {
  try {
    console.log('üß™ Iniciando prueba b√°sica del m√≥dulo de comunicados...');
    
    // 1. Verificar que las tablas existen
    console.log('üìã Verificando tablas en la base de datos...');
    const countComunicados = await prisma.comunicado.count();
    const countLecturas = await prisma.comunicadoLectura.count();
    const countNotificaciones = await prisma.notificacion.count();
    
    console.log(`‚úÖ Tablas verificadas: ${countComunicados} comunicados, ${countLecturas} lecturas, ${countNotificaciones} notificaciones`);
    
    // 2. Verificar funciones del servicio
    console.log('üîß Verificando funciones del servicio...');
    
    // Verificar validaci√≥n HTML
    const htmlValido = '<p>Contenido v√°lido</p>';
    const resultadoValidacion = comunicadosService.validarHTML(htmlValido);
    console.log(`‚úÖ Validaci√≥n HTML: ${resultadoValidacion.es_valido ? 'V√°lido' : 'Inv√°lido'}`);
    
    // Verificar generaci√≥n de preview
    const contenidoLargo = '<p>Este es un contenido largo para generar un preview de m√°ximo 120 caracteres. Este contenido debe ser truncado correctamente.</p>';
    const preview = comunicadosService.generarPreviewContenido(contenidoLargo);
    console.log(`‚úÖ Preview generado (${preview.length} caracteres): ${preview.substring(0, 50)}...`);
    
    // 3. Crear un usuario de prueba para el comunicado
    console.log('üë§ Creando usuario de prueba...');
    const usuarioPrueba = await prisma.usuario.findFirst({
      where: { rol: 'director' }
    });
    
    if (!usuarioPrueba) {
      throw new Error('No se encontr√≥ un usuario director para la prueba');
    }
    
    console.log(`‚úÖ Usuario director encontrado: ${usuarioPrueba.nombre} ${usuarioPrueba.apellido}`);
    
    // 4. Crear un comunicado de prueba
    console.log('üìù Creando comunicado de prueba...');
    const datosComunicado = {
      titulo: 'Comunicado de prueba para verificaci√≥n',
      tipo: 'informativo',
      contenido_html: '<p>Este es un comunicado de prueba para verificar el funcionamiento del m√≥dulo de comunicados.</p>',
      publico_objetivo: ['todos'],
      estado: 'borrador'
    };
    
    const comunicadoCreado = await comunicadosService.guardarBorrador(datosComunicado, usuarioPrueba);
    console.log(`‚úÖ Comunicado creado: ${comunicadoCreado.id} - ${comunicadoCreado.titulo}`);
    
    // 5. Verificar que se puede leer el comunicado
    console.log('üìñ Verificando lectura del comunicado...');
    const comunicadoLeido = await prisma.comunicado.findUnique({
      where: { id: comunicadoCreado.id }
    });
    
    if (!comunicadoLeido) {
      throw new Error('No se pudo leer el comunicado creado');
    }
    
    console.log(`‚úÖ Comunicado le√≠do correctamente: ${comunicadoLeido.estado}`);
    
    // 6. Limpiar datos de prueba
    console.log('üßπ Limpiando datos de prueba...');
    await prisma.comunicado.delete({
      where: { id: comunicadoCreado.id }
    });
    console.log('‚úÖ Datos de prueba eliminados');
    
    console.log('\nüéâ ¬°Prueba b√°sica del m√≥dulo de comunicados completada exitosamente!');
    console.log('\nüìã Resumen de funcionalidades verificadas:');
    console.log('  ‚úÖ Tablas de base de datos creadas');
    console.log('  ‚úÖ Funciones del servicio funcionando');
    console.log('  ‚úÖ Creaci√≥n de comunicados');
    console.log('  ‚úÖ Lectura de comunicados');
    console.log('  ‚úÖ Validaci√≥n HTML');
    console.log('  ‚úÖ Generaci√≥n de preview');
    
  } catch (error) {
    console.error('\n‚ùå Error en la prueba b√°sica:', error.message);
    process.exit(1);
  } finally {
    await prisma.$disconnect();
  }
}

// Ejecutar prueba
testComunicadosBasico();